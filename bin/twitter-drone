#!/usr/bin/env node

const program = require('commander');
const dotenv = require('dotenv');
const drone = require('../');
const core = drone.core;
const service = drone.service;
const stream = drone.stream;
const spinner = drone.spinner;
const option = drone.option;
const packageArray = require('../package.json');

let action = null;
let CORE;

program.version(packageArray.name + ' ' + packageArray.version);
program
	.command('search <type>')
	.option('-Q, --query <query>')
	.option('-C, --count <count>')
	.option('-I, --background-interval <background-interval>')
	.option('-B, --background-run')
	.action((command, options) =>
	{
		if (command === 'tweet')
		{
			action = 'search-tweet';
		}
		else if (command === 'user')
		{
			action = 'search-user';
		}
		else
		{
			process.exit(1);
		}
		option.init(
		{
			search:
			{
				query: options.query || option.get('search').query,
				count: options.count || option.get('search').count,
				backgroundInterval: options.backgroundInterval || option.get('search').backgroundInterval,
				backgroundRun: options.backgroundRun || option.get('search').backgroundRun
			}
		});
	});
program
	.command('list <type>')
	.option('-C, --count <count>')
	.option('-I, --background-interval <background-interval>')
	.option('-B, --background-run')
	.action((command, options) =>
	{
		if (command === 'follower')
		{
			action = 'list-follower';
		}
		else if (command === 'friend')
		{
			action = 'list-friend';
		}
		else if (command === 'tweet')
		{
			action = 'list-tweet';
		}
		else if (command === 'like')
		{
			action = 'list-like';
		}
		else
		{
			process.exit(1);
		}
		option.init(
		{
			list:
			{
				count: options.count || option.get('list').count,
				backgroundInterval: options.backgroundInterval || option.get('list').backgroundInterval,
				backgroundRun: options.backgroundRun || option.get('list').backgroundRun
			}
		});
	});
[
	'tweet',
	'retweet',
	'like',
	'follow'
]
.map(command => program
	.command(command)
	.option('-U, --undo-run')
	.option('-D, --dry-run')
	.action(options =>
	{
		action = command;
		option.init(
		{
			general:
			{
				dryRun: options.dryRun || option.get('general').dryRun,
				undoRun: options.undoRun || option.get('general').undoRun
			}
		});
	})
);
program.parse(process.argv);

dotenv.config();
if (process.env.TWITTER_API_KEY &&
	process.env.TWITTER_API_KEY_SECRET &&
	process.env.TWITTER_ACCESS_TOKEN &&
	process.env.TWITTER_ACCESS_TOKEN_SECRET
)
{
	stream.init();
	spinner.init();
	CORE = new core(
	{
		service,
		stream,
		spinner,
		option
	});
	CORE.init(
	{
		consumerKey: process.env.TWITTER_API_KEY,
		consumerSecret: process.env.TWITTER_API_KEY_SECRET,
		accessToken: process.env.TWITTER_ACCESS_TOKEN,
		accessTokenSecret: process.env.TWITTER_ACCESS_TOKEN_SECRET
	});
	CORE.run(action);
}
else
{
	process.exit(1);
}